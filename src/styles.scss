/* You can add global styles to this file, and also import other style files */

@import '~@angular/material/theming';
@import './palette.scss';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$app-primary: mat-palette($lf-palette, 500, A200, 900);
$app-accent:  mat-palette($lf-palette, 500, A200, 900);

// The warn palette is optional (defaults to red).
$app-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$app-theme: mat-light-theme($app-primary, $app-accent, $app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($app-theme);


@import "./colors.scss";

html {
    margin: 0;
    height: 100%;
}

body {
    font-family: Roboto, Arial, sans-serif;
    margin: 0;
    display: flex;
    min-height:100%;
    background-color: #111F33;
}

app-root {
    width: 100%;
}

.basic-container {
    padding: 0;
    height: 100%;
    width: 100%;
}

.mat-button-toggle-button {
    flex: 1 1 100%;
    box-sizing: border-box;
    align-items: center;
    flex-direction: row;
    display: flex;
    background-color: #000;
}

.mat-button-toggle-label-content {
    text-align: center;
    flex: 1 1 100%;
}

.mat-list-item-content {
    flex-grow: 1;
}

.mat-toolbar.mat-primary {
    background-color: #111F33;
}

.rotate-90 {
    -webkit-transform: rotate(90deg);
    -moz-transform: rotate(90deg);
    -ms-transform: rotate(90deg);
    -o-transform: rotate(90deg);
    transform: rotate(90deg);
}

.rotate-180 {
    -webkit-transform: rotate(180deg);
    -moz-transform: rotate(180deg);
    -ms-transform: rotate(180deg);
    -o-transform: rotate(180deg);
    transform: rotate(180deg);
}

.user-type-btn {
    font-size: 30px;
}

.user-type-img {
    width: 75px;
    height: 75px;
    margin: 10px;
}

/// ng2-dragula css!
/* in-flight clone */
.gu-mirror {
    position: fixed !important;
    margin: 0 !important;
    z-index: 9999 !important;
    opacity: 0.8;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
    filter: alpha(opacity=80);
    pointer-events: none;
}
/* high-performance display:none; helper */
.gu-hide {
    left: -9999px !important;
}
/* added to mirrorContainer (default = body) while dragging */
.gu-unselectable {
    -webkit-user-select: none !important;
    -moz-user-select: none !important;
    -ms-user-select: none !important;
    user-select: none !important;
}
/* added to the source element while its mirror is dragged */
.gu-transit {
    opacity: 0.2;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
    filter: alpha(opacity=20);
}

/* Useful for creating a block so that elements underneath do not overlap */
.clearfix {
    display: inline-block;
}
